load("@bazel_skylib//lib:selects.bzl", "selects")
load("@bazel_skylib//rules:common_settings.bzl", "string_flag")
load("@bazel_skylib//rules:expand_template.bzl", "expand_template")
load("@rules_cc//cc:defs.bzl", "cc_library")
load(":sdl_setting.bzl", "sdl_config_substitutions", "sdl_config_substitutions_todo", "sdl_setting", "sdl_setting_auto_default")

sdl_setting(
    name = "audio",
    multiple = True,
    values = [
        "alsa",
        "alsa_dynamic",
        "android",
        "opensles",
        "aaudio",
        "arts",
        "arts_dynamic",
        "coreaudio",
        "disk",
        "dsound",
        "dummy",
        "emscripten",
        "esd",
        "esd_dynamic",
        "fusionsound",
        "fusionsound_dynamic",
        "haiku",
        "jack",
        "jack_dynamic",
        "nas",
        "nas_dynamic",
        "netbsd",
        "oss",
        "paudio",
        "pipewire",
        "pipewire_dynamic",
        "pulseaudio",
        "pulseaudio_dynamic",
        "qsa",
        "sndio",
        "sndio_dynamic",
        "sunaudio",
        "wasapi",
        "winmm",
        "os2",
        "vita",
        "psp",
        "ps2",
        "n3ds",
    ],
)
sdl_setting_auto_default(
    name = "windows",
    sdl_setting_name = "audio",
    constraint_values = ["@platforms//os:windows"],
)

sdl_setting(
    name = "core",
    values = [
        "windows",
        "winrt",
    ],
)
sdl_setting_auto_default(
    name = "windows",
    sdl_setting_name = "core",
    constraint_values = ["@platforms//os:windows"],
)

sdl_setting(
    name = "filesystem",
    values = [
        "windows",
        "winrt",
    ],
)
sdl_setting_auto_default(
    name = "windows",
    sdl_setting_name = "filesystem",
    constraint_values = ["@platforms//os:windows"],
)

sdl_setting(
    name = "haptic",
    values = [
        "windows",
    ],
)
sdl_setting_auto_default(
    name = "windows",
    sdl_setting_name = "haptic",
    constraint_values = ["@platforms//os:windows"],
)

sdl_setting(
    name = "thread",
    values = [
        "generic",
        "pthread",
        "stdcpp",
        "windows",
    ],
)
sdl_setting_auto_default(
    name = "windows",
    sdl_setting_name = "thread",
    constraint_values = ["@platforms//os:windows"],
)

sdl_setting(
    name = "main",
    values = [
        "windows",
        "winrt",
    ],
)
sdl_setting_auto_default(
    name = "windows",
    sdl_setting_name = "main",
    constraint_values = ["@platforms//os:windows"],
)

sdl_setting(
    name = "render",
    multiple = True,
    values = [
        "d3d",
        "d3d11",
        "d3d12",
        "metal",
        "ogl",
        "ogl_es2",
        "ogl_es",
        "directfb",
        "ps2",
        "psp",
        "vita_gxm",
        "sw",
    ],
)
sdl_setting_auto_default(
    name = "windows",
    sdl_setting_name = "render",
    constraint_values = ["@platforms//os:windows"],
)

sdl_setting(
    name = "timer",
    values = [
        "dummy",
        "windows",
    ],
)
sdl_setting_auto_default(
    name = "windows",
    sdl_setting_name = "timer",
    constraint_values = ["@platforms//os:windows"],
)

sdl_setting(
    name = "misc",
    values = [
        "dummy",
        "windows",
        "winrt",
    ],
)
sdl_setting_auto_default(
    name = "windows",
    sdl_setting_name = "misc",
    constraint_values = ["@platforms//os:windows"],
)

sdl_setting(
    name = "joystick",
    multiple = True,
    values = [
        "android",
        "haiku",
        "wgi",
        "dinput",
        "xinput",
        "dummy",
        "iokit",
        "mfi",
        "linux",
        "os2",
        "usbhid",
        "hidapi",
        "rawinput",
        "emscripten",
        "virtual",
        "vita",
        "psp",
        "ps2",
        "n3ds",
    ],
)
sdl_setting_auto_default(
    name = "windows",
    sdl_setting_name = "joystick",
    constraint_values = ["@platforms//os:windows"],
)

sdl_setting(
    name = "power",
    multiple = True,
    values = [
        "linux",
        "windows",
        "uikit",
        "macosx",
        "haiku",
        "android",
        "psp",
        "vita",
        "n3ds",
        "winrt",
        "emscripten",
        "hardwired",
    ],
)
sdl_setting_auto_default(
    name = "windows",
    sdl_setting_name = "power",
    constraint_values = ["@platforms//os:windows"],
)

sdl_setting(
    name = "sensor",
    multiple = True,
    values = [
        "android",
        "coremotion",
        "windows",
        "vita",
        "n3ds",
        "dummy",
    ],
)
sdl_setting_auto_default(
    name = "windows",
    sdl_setting_name = "sensor",
    constraint_values = ["@platforms//os:windows"],
)

sdl_setting(
    name = "video",
    multiple = True,
    values = [
        "cocoa",
        "x11",
        "wayland",
        "vivante",
        "directfb",
        "windows",
        "winrt",
        "haiku",
        "pandora",
        "uikit",
        "android",
        "ps2",
        "psp",
        "vita",
        "n3ds",
        "kmsdrm",
        "riscos",
        "rpi",
        "nacl",
        "emscripten",
        "qnx",
        "os2",
        "ngage",
        "offscreen",
        "dummy",
    ],
)
sdl_setting_auto_default(
    name = "windows",
    sdl_setting_name = "video",
    constraint_values = ["@platforms//os:windows"],
)

sdl_setting(
    name = "locale",
    values = [
        "windows",
        "winrt",
    ],
)
sdl_setting_auto_default(
    name = "windows",
    sdl_setting_name = "locale",
    constraint_values = ["@platforms//os:windows"],
)

sdl_setting(
    name = "hidapi",
    values = [
        "windows",
    ],
)
sdl_setting_auto_default(
    name = "windows",
    sdl_setting_name = "hidapi",
    constraint_values = ["@platforms//os:windows"],
)

cc_library(
    name = "sdl_internal_hdrs",
    hdrs = glob(["src/**/*.h"], exclude = ["src/main/**/*.h"]) + [
        # awkward "headers"
        "src/hidapi/windows/hid.c",
        "src/hidapi/mac/hid.c",
        "src/hidapi/linux/hid.c",
    ],
)

cc_library(
    name = "sdl_main",
    visibility = ["//visibility:public"],
    hdrs = ["include/SDL_main.h"],
    includes = ["include"],
    strip_include_prefix = "include",
    deps = [":sdl", ":sdl_internal_hdrs"],
    srcs = selects.with_or({
        (":use_main_windows", ":use_main_auto_windows"): glob(["src/main/windows/*.c"]),
        (":use_main_winrt"): glob(["src/main/winrt/*.c"]),
    }),
)

expand_template(
    name = "sdl_config_h",
    out = "SDL_config.h",
    template = "include/SDL_config_bazel.h.in",
    substitutions =
        # audio
        sdl_config_substitutions(setting = "audio", value = "alsa", defines = ["SDL_AUDIO_DRIVER_ALSA"]) |
        sdl_config_substitutions(setting = "audio", value = "alsa_dynamic", defines = ["SDL_AUDIO_DRIVER_ALSA_DYNAMIC"]) |
        sdl_config_substitutions(setting = "audio", value = "android", defines = ["SDL_AUDIO_DRIVER_ANDROID"]) |
        sdl_config_substitutions(setting = "audio", value = "opensles", defines = ["SDL_AUDIO_DRIVER_OPENSLES"]) |
        sdl_config_substitutions(setting = "audio", value = "aaudio", defines = ["SDL_AUDIO_DRIVER_AAUDIO"]) |
        sdl_config_substitutions(setting = "audio", value = "arts", defines = ["SDL_AUDIO_DRIVER_ARTS"]) |
        sdl_config_substitutions(setting = "audio", value = "arts_dynamic", defines = ["SDL_AUDIO_DRIVER_ARTS_DYNAMIC"]) |
        sdl_config_substitutions(setting = "audio", value = "coreaudio", defines = ["SDL_AUDIO_DRIVER_COREAUDIO"]) |
        sdl_config_substitutions(setting = "audio", value = "disk", defines = ["SDL_AUDIO_DRIVER_DISK"]) |
        sdl_config_substitutions(setting = "audio", value = "dsound", defines = ["SDL_AUDIO_DRIVER_DSOUND"]) |
        sdl_config_substitutions(setting = "audio", value = "dummy", defines = ["SDL_AUDIO_DRIVER_DUMMY"]) |
        sdl_config_substitutions(setting = "audio", value = "emscripten", defines = ["SDL_AUDIO_DRIVER_EMSCRIPTEN"]) |
        sdl_config_substitutions(setting = "audio", value = "esd", defines = ["SDL_AUDIO_DRIVER_ESD"]) |
        sdl_config_substitutions(setting = "audio", value = "esd_dynamic", defines = ["SDL_AUDIO_DRIVER_ESD_DYNAMIC"]) |
        sdl_config_substitutions(setting = "audio", value = "fusionsound", defines = ["SDL_AUDIO_DRIVER_FUSIONSOUND"]) |
        sdl_config_substitutions(setting = "audio", value = "fusionsound_dynamic", defines = ["SDL_AUDIO_DRIVER_FUSIONSOUND_DYNAMIC"]) |
        sdl_config_substitutions(setting = "audio", value = "haiku", defines = ["SDL_AUDIO_DRIVER_HAIKU"]) |
        sdl_config_substitutions(setting = "audio", value = "jack", defines = ["SDL_AUDIO_DRIVER_JACK"]) |
        sdl_config_substitutions(setting = "audio", value = "jack_dynamic", defines = ["SDL_AUDIO_DRIVER_JACK_DYNAMIC"]) |
        sdl_config_substitutions(setting = "audio", value = "nas", defines = ["SDL_AUDIO_DRIVER_NAS"]) |
        sdl_config_substitutions(setting = "audio", value = "nas_dynamic", defines = ["SDL_AUDIO_DRIVER_NAS_DYNAMIC"]) |
        sdl_config_substitutions(setting = "audio", value = "netbsd", defines = ["SDL_AUDIO_DRIVER_NETBSD"]) |
        sdl_config_substitutions(setting = "audio", value = "oss", defines = ["SDL_AUDIO_DRIVER_OSS"]) |
        sdl_config_substitutions(setting = "audio", value = "paudio", defines = ["SDL_AUDIO_DRIVER_PAUDIO"]) |
        sdl_config_substitutions(setting = "audio", value = "pipewire", defines = ["SDL_AUDIO_DRIVER_PIPEWIRE"]) |
        sdl_config_substitutions(setting = "audio", value = "pipewire_dynamic", defines = ["SDL_AUDIO_DRIVER_PIPEWIRE_DYNAMIC"]) |
        sdl_config_substitutions(setting = "audio", value = "pulseaudio", defines = ["SDL_AUDIO_DRIVER_PULSEAUDIO"]) |
        sdl_config_substitutions(setting = "audio", value = "pulseaudio_dynamic", defines = ["SDL_AUDIO_DRIVER_PULSEAUDIO_DYNAMIC"]) |
        sdl_config_substitutions(setting = "audio", value = "qsa", defines = ["SDL_AUDIO_DRIVER_QSA"]) |
        sdl_config_substitutions(setting = "audio", value = "sndio", defines = ["SDL_AUDIO_DRIVER_SNDIO"]) |
        sdl_config_substitutions(setting = "audio", value = "sndio_dynamic", defines = ["SDL_AUDIO_DRIVER_SNDIO_DYNAMIC"]) |
        sdl_config_substitutions(setting = "audio", value = "sunaudio", defines = ["SDL_AUDIO_DRIVER_SUNAUDIO"]) |
        sdl_config_substitutions(setting = "audio", value = "wasapi", defines = ["SDL_AUDIO_DRIVER_WASAPI"]) |
        sdl_config_substitutions(setting = "audio", value = "winmm", auto_setting = "windows", defines = ["SDL_AUDIO_DRIVER_WINMM"]) |
        sdl_config_substitutions(setting = "audio", value = "os2", defines = ["SDL_AUDIO_DRIVER_OS2"]) |
        sdl_config_substitutions(setting = "audio", value = "vita", defines = ["SDL_AUDIO_DRIVER_VITA"]) |
        sdl_config_substitutions(setting = "audio", value = "psp", defines = ["SDL_AUDIO_DRIVER_PSP"]) |
        sdl_config_substitutions(setting = "audio", value = "ps2", defines = ["SDL_AUDIO_DRIVER_PS2"]) |
        sdl_config_substitutions(setting = "audio", value = "n3ds", defines = ["SDL_AUDIO_DRIVER_N3DS"]) |

        # thread
        sdl_config_substitutions(setting = "thread", value = "windows", auto_setting = "windows", defines = ["SDL_THREAD_WINDOWS", "SDL_THREAD_GENERIC_COND_SUFFIX"]) |
        sdl_config_substitutions(setting = "thread", value = "pthread", defines = ["SDL_THREAD_PTHREAD"]) |

        # joystick
        sdl_config_substitutions(setting = "joystick", value = "dinput", auto_setting = "windows", defines = ["SDL_JOYSTICK_DINPUT"]) |
        sdl_config_substitutions(setting = "joystick", value = "xinput", defines = ["SDL_JOYSTICK_XINPUT"]) |
        sdl_config_substitutions(setting = "joystick", value = "rawinput", defines = ["SDL_JOYSTICK_RAWINPUT"]) |
        sdl_config_substitutions(setting = "joystick", value = "virtual", defines = ["SDL_JOYSTICK_VIRTUAL"]) |

        # sensor
        sdl_config_substitutions(setting = "sensor", value = "windows", auto_setting = "windows", defines = ["SDL_SENSOR_WINDOWS"]) |

        # power
        sdl_config_substitutions(setting = "power", value = "windows", auto_setting = "windows", defines = ["SDL_POWER_WINDOWS"]) |

        # video
        sdl_config_substitutions(setting = "video", value = "windows", auto_setting = "windows", defines = ["SDL_VIDEO_DRIVER_WINDOWS"]) |
        sdl_config_substitutions(setting = "video", value = "dummy", auto_setting = "windows", defines = ["SDL_VIDEO_DRIVER_DUMMY"]) |

        # timer
        sdl_config_substitutions(setting = "timer", value = "windows", auto_setting = "windows", defines = ["SDL_TIMER_WINDOWS"]) |

        # render
        sdl_config_substitutions(setting = "render", value = "d3d", auto_setting = "windows", defines = ["SDL_VIDEO_RENDER_D3D"]) |
        sdl_config_substitutions(setting = "render", value = "d3d11", auto_setting = "windows", defines = ["SDL_VIDEO_RENDER_D3D11"]) |
        sdl_config_substitutions(setting = "render", value = "d3d12", auto_setting = "windows", defines = ["SDL_VIDEO_RENDER_D3D12"]) |
        sdl_config_substitutions(setting = "render", value = "metal", defines = ["SDL_VIDEO_RENDER_METAL"]) |
        sdl_config_substitutions(setting = "render", value = "ogl", defines = ["SDL_VIDEO_RENDER_OGL"]) |
        sdl_config_substitutions(setting = "render", value = "ogl_es2", defines = ["SDL_VIDEO_RENDER_OGL_ES2"]) |
        sdl_config_substitutions(setting = "render", value = "ogl_es", defines = ["SDL_VIDEO_RENDER_OGL_ES"]) |
        sdl_config_substitutions(setting = "render", value = "directfb", defines = ["SDL_VIDEO_RENDER_DIRECTFB"]) |
        sdl_config_substitutions(setting = "render", value = "ps2", defines = ["SDL_VIDEO_RENDER_PS2"]) |
        sdl_config_substitutions(setting = "render", value = "psp", defines = ["SDL_VIDEO_RENDER_PSP"]) |
        sdl_config_substitutions(setting = "render", value = "vita_gxm", defines = ["SDL_VIDEO_RENDER_VITA_GXM"]) |
        sdl_config_substitutions(setting = "render", value = "sw", defines = ["SDL_VIDEO_RENDER_SW"]) |

        # TODO
        sdl_config_substitutions_todo([
            "SDL_INPUT_LINUXEV",
            "SDL_INPUT_LINUXKD",
            "SDL_INPUT_FBSDKBIO",
            "SDL_INPUT_WSCONS",
            "SDL_JOYSTICK_ANDROID",
            "SDL_JOYSTICK_HAIKU",
            "SDL_JOYSTICK_WGI",
            "SDL_JOYSTICK_DUMMY",
            "SDL_JOYSTICK_IOKIT",
            "SDL_JOYSTICK_MFI",
            "SDL_JOYSTICK_LINUX",
            "SDL_JOYSTICK_OS2",
            "SDL_JOYSTICK_USBHID",
            "SDL_JOYSTICK_HIDAPI",
            "SDL_JOYSTICK_EMSCRIPTEN",
            "SDL_JOYSTICK_VITA",
            "SDL_JOYSTICK_PSP",
            "SDL_JOYSTICK_PS2",
            "SDL_JOYSTICK_N3DS",
            "SDL_HAPTIC_DUMMY",
            "SDL_HAPTIC_LINUX",
            "SDL_HAPTIC_IOKIT",
            "SDL_HAPTIC_DINPUT",
            "SDL_HAPTIC_XINPUT",
            "SDL_HAPTIC_ANDROID",
            "SDL_LIBUSB_DYNAMIC",
            "SDL_UDEV_DYNAMIC",
            "SDL_SENSOR_ANDROID",
            "SDL_SENSOR_COREMOTION",
            "SDL_SENSOR_DUMMY",
            "SDL_SENSOR_VITA",
            "SDL_SENSOR_N3DS",
            "SDL_LOADSO_DLOPEN",
            "SDL_LOADSO_DUMMY",
            "SDL_LOADSO_LDG",
            "SDL_LOADSO_WINDOWS",
            "SDL_LOADSO_OS2",
            "SDL_THREAD_PTHREAD_RECURSIVE_MUTEX",
            "SDL_THREAD_PTHREAD_RECURSIVE_MUTEX_NP",
            "SDL_THREAD_OS2",
            "SDL_THREAD_VITA",
            "SDL_THREAD_PSP",
            "SDL_THREAD_PS2",
            "SDL_THREAD_N3DS",
            "SDL_TIMER_HAIKU",
            "SDL_TIMER_DUMMY",
            "SDL_TIMER_UNIX",
            "SDL_TIMER_OS2",
            "SDL_TIMER_VITA",
            "SDL_TIMER_PSP",
            "SDL_TIMER_PS2",
            "SDL_TIMER_N3DS",
            "SDL_VIDEO_DRIVER_ANDROID",
            "SDL_VIDEO_DRIVER_EMSCRIPTEN",
            "SDL_VIDEO_DRIVER_HAIKU",
            "SDL_VIDEO_DRIVER_COCOA",
            "SDL_VIDEO_DRIVER_UIKIT",
            "SDL_VIDEO_DRIVER_DIRECTFB",
            "SDL_VIDEO_DRIVER_DIRECTFB_DYNAMIC",
            "SDL_VIDEO_DRIVER_DUMMY",
            "SDL_VIDEO_DRIVER_OFFSCREEN",
            "SDL_VIDEO_DRIVER_WINRT",
            "SDL_VIDEO_DRIVER_WAYLAND",
            "SDL_VIDEO_DRIVER_RPI",
            "SDL_VIDEO_DRIVER_VIVANTE",
            "SDL_VIDEO_DRIVER_VIVANTE_VDK",
            "SDL_VIDEO_DRIVER_OS2",
            "SDL_VIDEO_DRIVER_QNX",
            "SDL_VIDEO_DRIVER_RISCOS",
            "SDL_VIDEO_DRIVER_PSP",
            "SDL_VIDEO_DRIVER_PS2",
            "SDL_VIDEO_DRIVER_KMSDRM",
            "SDL_VIDEO_DRIVER_KMSDRM_DYNAMIC",
            "SDL_VIDEO_DRIVER_KMSDRM_DYNAMIC_GBM",
            "SDL_VIDEO_DRIVER_WAYLAND_QT_TOUCH",
            "SDL_VIDEO_DRIVER_WAYLAND_DYNAMIC",
            "SDL_VIDEO_DRIVER_WAYLAND_DYNAMIC_EGL",
            "SDL_VIDEO_DRIVER_WAYLAND_DYNAMIC_CURSOR",
            "SDL_VIDEO_DRIVER_WAYLAND_DYNAMIC_XKBCOMMON",
            "SDL_VIDEO_DRIVER_WAYLAND_DYNAMIC_LIBDECOR",
            "SDL_VIDEO_DRIVER_X11",
            "SDL_VIDEO_DRIVER_X11_DYNAMIC",
            "SDL_VIDEO_DRIVER_X11_DYNAMIC_XEXT",
            "SDL_VIDEO_DRIVER_X11_DYNAMIC_XCURSOR",
            "SDL_VIDEO_DRIVER_X11_DYNAMIC_XINPUT2",
            "SDL_VIDEO_DRIVER_X11_DYNAMIC_XFIXES",
            "SDL_VIDEO_DRIVER_X11_DYNAMIC_XRANDR",
            "SDL_VIDEO_DRIVER_X11_DYNAMIC_XSS",
            "SDL_VIDEO_DRIVER_X11_XCURSOR",
            "SDL_VIDEO_DRIVER_X11_XDBE",
            "SDL_VIDEO_DRIVER_X11_XINPUT2",
            "SDL_VIDEO_DRIVER_X11_XINPUT2_SUPPORTS_MULTITOUCH",
            "SDL_VIDEO_DRIVER_X11_XFIXES",
            "SDL_VIDEO_DRIVER_X11_XRANDR",
            "SDL_VIDEO_DRIVER_X11_XSCRNSAVER",
            "SDL_VIDEO_DRIVER_X11_XSHAPE",
            "SDL_VIDEO_DRIVER_X11_SUPPORTS_GENERIC_EVENTS",
            "SDL_VIDEO_DRIVER_X11_HAS_XKBKEYCODETOKEYSYM",
            "SDL_VIDEO_DRIVER_VITA",
            "SDL_VIDEO_DRIVER_N3DS",
            "SDL_VIDEO_OPENGL",
            "SDL_VIDEO_OPENGL_ES",
            "SDL_VIDEO_OPENGL_ES2",
            "SDL_VIDEO_OPENGL_BGL",
            "SDL_VIDEO_OPENGL_CGL",
            "SDL_VIDEO_OPENGL_GLX",
            "SDL_VIDEO_OPENGL_WGL",
            "SDL_VIDEO_OPENGL_EGL",
            "SDL_VIDEO_OPENGL_OSMESA",
            "SDL_VIDEO_OPENGL_OSMESA_DYNAMIC",
            "SDL_VIDEO_VULKAN",
            "SDL_VIDEO_METAL",
            "SDL_POWER_ANDROID",
            "SDL_POWER_LINUX",
            "SDL_POWER_WINRT",
            "SDL_POWER_MACOSX",
            "SDL_POWER_UIKIT",
            "SDL_POWER_HAIKU",
            "SDL_POWER_EMSCRIPTEN",
            "SDL_POWER_HARDWIRED",
            "SDL_POWER_VITA",
            "SDL_POWER_PSP",
            "SDL_POWER_N3DS",
            "SDL_FILESYSTEM_ANDROID",
            "SDL_FILESYSTEM_HAIKU",
            "SDL_FILESYSTEM_COCOA",
            "SDL_FILESYSTEM_DUMMY",
            "SDL_FILESYSTEM_RISCOS",
            "SDL_FILESYSTEM_UNIX",
            "SDL_FILESYSTEM_WINDOWS",
            "SDL_FILESYSTEM_EMSCRIPTEN",
            "SDL_FILESYSTEM_OS2",
            "SDL_FILESYSTEM_VITA",
            "SDL_FILESYSTEM_PSP",
            "SDL_FILESYSTEM_PS2",
            "SDL_FILESYSTEM_N3DS",
            "SDL_MISC_DUMMY",
            "SDL_LOCALE_DUMMY",
            "SDL_ALTIVEC_BLITTERS",
            "SDL_ARM_SIMD_BLITTERS",
            "SDL_ARM_NEON_BLITTERS",
            "SDL_LIBSAMPLERATE_DYNAMIC",
            "SDL_USE_IME",
            "SDL_IPHONE_KEYBOARD",
            "SDL_IPHONE_LAUNCHSCREEN",
            "SDL_VIDEO_VITA_PIB",
            "SDL_VIDEO_VITA_PVR",
            "SDL_VIDEO_VITA_PVR_OGL",
        ]),
)

cc_library(
    name = "sdl",
    visibility = ["//visibility:public"],
    hdrs = glob(["include/*.h"], exclude = ["include/SDL_config.h"]),
    strip_include_prefix = "include",
    local_defines = [
        "USING_GENERATED_CONFIG_H",
    ],
    includes = ["include"],
    deps = [
        ":sdl_internal_hdrs",
    ],
    linkopts = select({
        "@platforms//os:windows": [
            "-DEFAULTLIB:user32",
            "-DEFAULTLIB:gdi32",
            "-DEFAULTLIB:winmm",
            "-DEFAULTLIB:imm32",
            "-DEFAULTLIB:ole32",
            "-DEFAULTLIB:oleaut32",
            "-DEFAULTLIB:version",
            "-DEFAULTLIB:uuid",
            "-DEFAULTLIB:shell32",
            "-DEFAULTLIB:advapi32",
            "-DEFAULTLIB:hid",
            "-DEFAULTLIB:setupapi",
            "-DEFAULTLIB:opengl32",
            "-DEFAULTLIB:kernel32",
        ],
        "//conditions:default": [],
    }),
    srcs = [":sdl_config_h"] + glob([
        "src/*.c",
        "src/*.h",
        "src/atomic/*.c",
        "src/atomic/*.h",
        "src/audio/*.c",
        "src/audio/*.h",
        "src/cpuinfo/*.c",
        "src/cpuinfo/*.h",
        "src/dynapi/*.c",
        "src/dynapi/*.h",
        "src/events/*.c",
        "src/events/*.h",
        "src/file/*.c",
        "src/file/*.h",
        "src/haptic/*.c",
        "src/haptic/*.h",
        "src/libm/*.c",
        "src/libm/*.h",
        "src/stdlib/*.c",
        "src/stdlib/*.h",
        "src/joystick/*.c",
        "src/joystick/*.h",
        "src/thread/*.c",
        "src/thread/*.h",
        "src/render/*.c",
        "src/render/*.h",
        "src/timer/*.c",
        "src/timer/*.h",
        "src/misc/*.c",
        "src/misc/*.h",
        "src/power/*.c",
        "src/power/*.h",
        "src/sensor/*.c",
        "src/sensor/*.h",
        # "src/video/*.c",
        # "src/video/*.h",
        "src/hidapi/*.c",
        "src/hidapi/*.h",
    ]) + selects.with_or({
        (":use_audio_winmm", ":use_audio_auto_windows"): glob([
            "src/audio/winmm/*.c",
            "src/audio/winmm/*.h",
        ]),
    }) + selects.with_or({
        (":use_core_windows", ":use_core_auto_windows"): glob([
            "src/core/windows/*.c",
            "src/core/windows/*.h",
        ]),
        (":use_core_winrt"): glob([
            "src/core/winrt/*.c",
            "src/core/winrt/*.h",
        ]),
    }) + selects.with_or({
        (":use_filesystem_windows", ":use_filesystem_auto_windows"): glob([
            "src/filesystem/windows/*.c",
            "src/filesystem/windows/*.h",
        ]),
        (":use_filesystem_winrt"): glob([
            "src/filesystem/winrt/*.c",
            "src/filesystem/winrt/*.h",
        ]),
    }) + selects.with_or({
        (":use_haptic_windows", ":use_haptic_auto_windows"): glob([
            "src/haptic/windows/*.c",
            "src/haptic/windows/*.h",
        ]),
    }) + selects.with_or({
        (":use_thread_generic"): glob([
            "src/thread/generic/*.c",
            "src/thread/generic/*.h",
        ]),
        (":use_thread_stdcpp"): glob([
            "src/thread/stdcpp/*.c",
            "src/thread/stdcpp/*.h",
        ]),
        (":use_thread_pthread"): glob([
            "src/thread/pthread/*.c",
            "src/thread/pthread/*.h",
        ]),
        (":use_thread_windows", ":use_thread_auto_windows"): glob([
            "src/thread/generic/*.c",
            "src/thread/generic/*.h",
            "src/thread/windows/*.c",
            "src/thread/windows/*.h",
        ]),
    }) + selects.with_or({
        (":use_render_d3d", ":use_render_auto_windows"): glob([
            "src/render/direct3d/*.c",
            "src/render/direct3d/*.h",
        ]),
        "//conditions:default": [],
    }) + selects.with_or({
        (":use_render_d3d11", ":use_render_auto_windows"): glob([
            "src/render/direct3d11/*.c",
            "src/render/direct3d11/*.h",
        ]),
        "//conditions:default": [],
    }) + selects.with_or({
        (":use_render_d3d12", ":use_render_auto_windows"): glob([
            "src/render/direct3d12/*.c",
            "src/render/direct3d12/*.h",
        ]),
        "//conditions:default": [],
    }) + selects.with_or({
        (":use_render_ogl", ":use_render_auto_windows"): glob([
            "src/render/opengl/*.c",
            "src/render/opengl/*.h",
        ]),
        "//conditions:default": [],
    }) + selects.with_or({
        (":use_render_ogl_es", ":use_render_auto_windows"): glob([
            "src/render/opengles/*.c",
            "src/render/opengles/*.h",
        ]),
        "//conditions:default": [],
    }) + selects.with_or({
        (":use_render_ogl_es2", ":use_render_auto_windows"): glob([
            "src/render/opengles2/*.c",
            "src/render/opengles2/*.h",
        ]),
        "//conditions:default": [],
    }) + select({
        ":use_render_software": glob([
            "src/render/software/*.c",
            "src/render/software/*.h",
        ]),
        "//conditions:default": [],
    }) + selects.with_or({
        (":use_timer_windows", ":use_timer_auto_windows"): glob([
            "src/timer/windows/*.c",
            "src/timer/windows/*.h",
        ]),
        (":use_timer_dummy"): glob([
            "src/timer/dummy/*.c",
            "src/timer/dummy/*.h",
        ]),
    }) + selects.with_or({
        (":use_misc_windows", ":use_misc_auto_windows"): glob([
            "src/misc/windows/*.c",
            "src/misc/windows/*.h",
        ]),
        (":use_misc_winrt"): glob([
            "src/misc/winrt/*.c",
            "src/misc/winrt/*.h",
        ]),
        (":use_misc_dummy"): glob([
            "src/misc/dummy/*.c",
            "src/misc/dummy/*.h",
        ]),
    }) + selects.with_or({
        (":use_joystick_dinput", ":use_joystick_auto_windows"): [
            "src/joystick/windows/SDL_dinputjoystick.c",
            "src/joystick/windows/SDL_dinputjoystick_c.h",
        ],
    }) + selects.with_or({
        (":use_power_windows", ":use_power_auto_windows"): glob([
            "src/power/windows/*.c",
            "src/power/windows/*.h",
        ]),
        (":use_power_winrt"): glob([
            "src/power/winrt/*.c",
            "src/power/winrt/*.h",
        ]),
    }) + selects.with_or({
        (":use_sensor_windows", ":use_sensor_auto_windows"): glob([
            "src/sensor/windows/*.c",
            "src/sensor/windows/*.h",
        ]),
    }) + selects.with_or({
        (":use_video_windows", ":use_video_auto_windows"): glob([
            "src/video/windows/*.c",
            "src/video/windows/*.h",
        ]),
        (":use_video_winrt"): glob([
            "src/video/winrt/*.c",
            "src/video/winrt/*.h",
        ]),
    }) + selects.with_or({
        (":use_locale_windows", ":use_locale_auto_windows"): glob([
            "src/locale/windows/*.c",
            "src/locale/windows/*.h",
        ]),
        (":use_locale_winrt"): glob([
            "src/locale/winrt/*.c",
            "src/locale/winrt/*.h",
        ]),
    }),
)
